name = "Pallet Treasury"

[metadata]
description = """
The Treasury pallet provides a pot of funds that can be managed by stakeholders in the system and a structure for making spending proposals from this pot.
The Treasury Pallet itself provides the pot to store funds, and a means for stakeholders to propose and claim expenditures (aka spends). The chain will need to provide a method to approve spends (e.g. public referendum) and a method for collecting funds (e.g. inflation, fees)."""
short_description = "FRAME Treasury pallet"
is_essential = false
compatibility = "Two"
license = "Apache-2.0"
authors = ["ParityTechnologies"]
categories = ["Assets"]
supported_template=["SoloChain","ParaChain","Minimal","Frontier","SoloFrontierChain"]
size = 10500
updated = "1729175503"

[runtime]
additional_pallet_impl_code = '''

parameter_types! {
	
	pub const TreasuryPalletId: PalletId = PalletId(*b"py/trsry");
	pub const MaxBalance: Balance = Balance::max_value();
	pub TreasuryAccount: AccountId = Treasury::account_id();
}
'''
additional_runtime_lib_code = [
	"use sp_runtime::Percent;",
	"use frame_system::EnsureWithSuccess;",
	"use frame_support::traits::tokens::pay::PayAssetFromAccount;",
	"use frame_support::traits::tokens::UnityAssetBalanceConversion;",
]

# pub const TreasurySpendPayoutPeriod: BlockNumber = 30 * DAYS;
[runtime.optional_parameter_types.TreasurySpendPayoutPeriod]
name = "TreasurySpendPayoutPeriod"
description = "The period in blocks for treasury spend payouts."
prefix = "const"
p_type = "BlockNumber"

[runtime.optional_parameter_types.TreasurySpendPayoutPeriod.expression]
default_unit = "DAYS"
default_multiiplier = 30
format = "{} * {}"
possible_units = ["DAYS", "HOURS", "MINUTES"]
multiplier_configurable = true

# pub const TreasuryBurn: Permill = Permill::from_percent(50);
[runtime.optional_parameter_types.TreasuryBurn]
name = "TreasuryBurn"
description = "The proportion of funds burned from the treasury on each expenditure."
prefix = "const"
p_type = "Permill"

[runtime.optional_parameter_types.TreasuryBurn.expression]
default_unit = ""
default_multiiplier = 50
format = "{}Permill::from_percent({})"
possible_units = []
multiplier_configurable = true

# 	pub const TreasuryMaxApprovals: u32 = 100;
[runtime.optional_parameter_types.TreasuryMaxApprovals]
name = "TreasuryMaxApprovals"
description = "The maximum number of pending approvals allowed at any time."
prefix = "const"
p_type = "u32"

[runtime.optional_parameter_types.TreasuryMaxApprovals.expression]
default_unit = ""
default_multiiplier = 100
format = "{}{}"
possible_units = []
multiplier_configurable = true

#pub const TreasurySpendPeriod: BlockNumber = 1 * DAYS;
[runtime.optional_parameter_types.TreasurySpendPeriod]
name = "TreasurySpendPeriod"
description = "The period in blocks for treasury spending."
prefix = "const"
p_type = "BlockNumber"
[runtime.optional_parameter_types.TreasurySpendPeriod.expression]
default_unit = "DAYS"
default_multiiplier = 1
format = "{} * {}"
possible_units = ["DAYS", "HOURS", "MINUTES"]
multiplier_configurable = true


[runtime.construct_runtime]
runtime = ["Treasury", "pallet_treasury::Pallet<Runtime>"]

[runtime.pallet_traits]
RejectOrigin = "EnsureRoot<AccountId>"
BeneficiaryLookup = "Self::Lookup"
BalanceConverter = "UnityAssetBalanceConversion"
MaxApprovals = "TreasuryMaxApprovals"
SpendPeriod = "TreasurySpendPeriod"
Beneficiary = "AccountId"
PayoutPeriod = "TreasurySpendPayoutPeriod"
SpendOrigin = "EnsureWithSuccess<EnsureRoot<AccountId>, AccountId, MaxBalance>"
PalletId = "TreasuryPalletId"
RuntimeEvent = "RuntimeEvent"
Burn = "TreasuryBurn"
BurnDestination = "()"
AssetKind = "u32"
Currency = "Balances"
Paymaster = "PayAssetFromAccount<Assets, TreasuryAccount>"
SpendFunds = "()"
WeightInfo = "pallet_treasury::weights::SubstrateWeight<Runtime>"

[dependencies]
required_pallets = ["Pallet Assets"]


[dependencies.pallet]
package = "pallet-treasury"
alias = "pallet treasury"
default_features = false
git_repo = "https://github.com/paritytech/polkadot-sdk.git"
tag = "polkadot-v1.14.0"
