name = "Pallet Contracts"

[metadata]
description = "The Contracts pallet provides a framework for deploying and executing WebAssembly (Wasm) smart contracts on the Substrate blockchain, enabling features like contract creation, interaction, and storage management while supporting gas metering and runtime upgrades."
short_description = "FRAME Contracts pallet"
compatibility = "Two"
license = "Apache-2.0"
authors = ["ParityTechnologies"]
category = "SmartContracts"
supported_template = [
	"SoloChain",
	"ParaChain",
	"Minimal",
	"Frontier",
	"SoloFrontierChain",
]
size = 10500
updated = "1729175503"


[runtime]
additional_pallet_impl_code = """

parameter_types! {
	pub const DepositPerItem: Balance = deposit(1, 0);
	pub const DepositPerByte: Balance = deposit(0, 1);
	pub const DefaultDepositLimit: Balance = deposit(1024, 1024 * 1024);
    pub Schedule: pallet_contracts::Schedule<Runtime> = pallet_contracts::Schedule::default();

}
"""

# ! pub const CodeHashLockupDepositPercent: Perbill = Perbill::from_percent(20);
[runtime.optional_parameter_types.CodeHashLockupDepositPercent]
name = "CodeHashLockupDepositPercent"
description = "The percentage of deposit locked up for code hash, expressed as a Perbill."
prefix = "const"
p_type = "Perbill"
[runtime.optional_parameter_types.CodeHashLockupDepositPercent.expression]
default_unit = ""
default_multiplier = 20
format = "{}Perbill::from_percent({})"
possible_units = []
multiplier_configurable = true

# pub const MaxDelegateDependencies: u32 = 32;
[runtime.optional_parameter_types.MaxDelegateDependencies]
name = "MaxDelegateDependencies"
description = "The maximum number of delegate dependencies allowed."
prefix = "const"
p_type = "u32"
[runtime.optional_parameter_types.MaxDelegateDependencies.expression]
default_unit = ""
default_multiplier = 32
format = "{}{}"
possible_units = []
multiplier_configurable = true

# ! pub const MaxCodeLen: u32 = 128 * 1024;
[runtime.optional_parameter_types.MaxCodeLen]
name = "MaxCodeLen"
description = "The maximum length of code in bytes."
prefix = "const"
p_type = "u32"
[runtime.optional_parameter_types.MaxCodeLen.expression]
default_unit = "1024"
default_multiplier = 128
format = "{}*{}"
possible_units = ["1024"]
multiplier_configurable = true

# pub const MaxStorageKeyLen: u32 = 128;
[runtime.optional_parameter_types.MaxStorageKeyLen]
name = "MaxStorageKeyLen"
description = "The maximum length of a storage key."
prefix = "const"
p_type = "u32"
[runtime.optional_parameter_types.MaxStorageKeyLen.expression]
default_unit = ""
default_multiplier = 128
format = "{}{}"
possible_units = []
multiplier_configurable = true

# ! pub const MaxDebugBufferLen: u32 = 2 * 1024 * 1024;
[runtime.optional_parameter_types.MaxDebugBufferLen]
name = "MaxDebugBufferLen"
description = "The maximum length of the debug buffer in bytes."
prefix = "const"
p_type = "u32"
[runtime.optional_parameter_types.MaxDebugBufferLen.expression]
default_unit = "1024 * 1024"
default_multiplier = 2
format = "{}*{}"
possible_units = ["1024 * 1024"]
multiplier_configurable = true

# ! pub const UnsafeUnstableInterface: bool = true;
[runtime.optional_parameter_types.UnsafeUnstableInterface]
name = "UnsafeUnstableInterface"
description = "A flag indicating whether the unsafe unstable interface is enabled."
prefix = "const"
p_type = "bool"
[runtime.optional_parameter_types.UnsafeUnstableInterface.expression]
default_unit = "true"
default_multiplier = 1
format = "{}"
possible_units = ["true", "false"]
multiplier_configurable = false


[runtime.construct_runtime]
runtime = ["Contracts", "pallet_contracts::Pallet<Runtime>"]

[runtime.pallet_traits]
DepositPerItem = "DepositPerItem"
DepositPerByte = "DepositPerByte"
DefaultDepositLimit = "DefaultDepositLimit"
MaxCodeLen = "MaxCodeLen"
MaxStorageKeyLen = "MaxStorageKeyLen"
MaxDebugBufferLen = "MaxDebugBufferLen"
UnsafeUnstableInterface = "UnsafeUnstableInterface"
CodeHashLockupDepositPercent = "CodeHashLockupDepositPercent"
MaxDelegateDependencies = "MaxDelegateDependencies"
Time = "Timestamp"
Randomness = "RandomnessCollectiveFlip"
Currency = "Balances"
RuntimeEvent = "RuntimeEvent"
RuntimeCall = "RuntimeCall"
CallFilter = "frame_support::traits::Everything"
CallStack = "[pallet_contracts::Frame<Self>; 23]"
WeightPrice = "pallet_transaction_payment::Pallet<Self>"
WeightInfo = "pallet_contracts::weights::SubstrateWeight<Self>"
ChainExtension = "()"
Schedule = "Schedule"
AddressGenerator = "pallet_contracts::DefaultAddressGenerator"
RuntimeHoldReason = "RuntimeHoldReason"
Environment = "()"
Debug = "()"
ApiVersion = "()"
Migrations = "()"
Xcm = "()"
UploadOrigin = "EnsureSigned<Self::AccountId>"
InstantiateOrigin = "EnsureSigned<Self::AccountId>"


[dependencies]
required_pallets = ["Pallet Scheduler", "Pallet Transaction Payment"]
# RandomnessCollectiveFlip also

[dependencies.pallet]
package = "pallet-contracts"
alias = "pallet contracts"
default_features = false
git_repo = "https://github.com/paritytech/polkadot-sdk.git"
tag = "polkadot-v1.14.0"
