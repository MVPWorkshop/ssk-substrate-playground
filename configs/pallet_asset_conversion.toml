name = "Pallet Asset Conversion"

[metadata]
description = """This pallet allows assets to be converted from one type to another by means of a constant product formula. The pallet based is based on Uniswap V2 logic.

Overview
This pallet allows you to:

create a liquidity pool for 2 assets
provide the liquidity and receive back an LP token
exchange the LP token back to assets
swap 2 assets if there is a pool created
query for an exchange price via a new runtime call endpoint
query the size of a liquidity pool.
"""
short_description = "FRAME Asset Conversion pallet"
is_essential = false
compatibility = "Two"
license = "Apache-2.0"
authors = ["ParityTechnologies"]
categorie = "Assets"
supported_template=["SoloChain","ParaChain","Minimal","Frontier","SoloFrontierChain"]
size = 10500
updated = "1729175503"

[runtime]
additional_pallet_impl_code = """

parameter_types! {
	pub const AssetConversionPalletId: PalletId = PalletId(*b"py/ascon");
	pub const Native: NativeOrWithId<u32> = NativeOrWithId::Native;
}


pub type NativeAndAssets =
	UnionOf<Balances, Assets, NativeFromLeft, NativeOrWithId<u32>, AccountId>;

"""

additional_runtime_lib_code = [
	"use frame_support::traits::fungible::NativeOrWithId;",
	"use frame_support::traits::fungible::UnionOf;",
	"use frame_support::traits::fungible::NativeFromLeft;",
	"use pallet_asset_conversion::Chain;",
	"use pallet_asset_conversion::WithFirstAsset;",
	"use pallet_asset_conversion::AccountIdConverter;",
	"use pallet_asset_conversion::Ascending;",
]


# ! PoolSetupFee
[runtime.optional_parameter_types.PoolSetupFee]
name = "PoolSetupFee"
description = "The fee required to create a new liquidity pool. Must be greater than or equal to the existential deposit."
prefix = "const"
p_type = "Balance"

[runtime.optional_parameter_types.PoolSetupFee.expression]
default_unit = "DOLLARS"
default_multiiplier = 1
format = "{} * {}"
possible_units = ["DOLLARS", "CENTS", "MILLICENTS"]
multiplier_configurable = true

# ! MintMinLiquidity
[runtime.optional_parameter_types.MintMinLiquidity]
name = "MintMinLiquidity"
description = "The minimum liquidity required when minting a new liquidity pool."
prefix = "const"
p_type = "Balance"

[runtime.optional_parameter_types.MintMinLiquidity.expression]
default_unit = ""
default_multiiplier = 100
format = "{}{}"
possible_units = []
multiplier_configurable = false

# ! LiquidityithdrawalFee
[runtime.optional_parameter_types.LiquidityWithdrawalFee]
name = "LiquidityWithdrawalFee"
description = "The fee applied when withdrawing liquidity from a pool, as a proportion of the withdrawn amount."
prefix = "const"
p_type = "Permill"

[runtime.optional_parameter_types.LiquidityWithdrawalFee.expression]
default_unit = ""
default_multiiplier = 0
format = "{}Permill::from_percent({})"
possible_units = []
multiplier_configurable = true

# ! LPFee 
[runtime.optional_parameter_types.LPFee]
name = "LPFee"
description = "The fee charged on liquidity pool transactions, represented as a percentage."
prefix = "const"
p_type = "u32"

[runtime.optional_parameter_types.LPFee.expression]
default_unit = ""
default_multiiplier = 3
format = "{}{}"
possible_units = []
multiplier_configurable = true

# ! MaxSwapPathLength 
[runtime.optional_parameter_types.MaxSwapPathLength]
name = "MaxSwapPathLength"
description = "The maximum number of assets in the swap path for a single transaction."
prefix = "const"
p_type = "u32"

[runtime.optional_parameter_types.MaxSwapPathLength.expression]
default_unit = ""
default_multiiplier = 4
format = "{}{}"
possible_units = []
multiplier_configurable = true


[runtime.construct_runtime]
runtime = ["AssetConversion", "pallet_asset_conversion::Pallet<Runtime>"]

[runtime.pallet_traits]
RuntimeEvent = "RuntimeEvent"
Balance = "<Self as pallet_balances::Config>::Balance"
HigherPrecisionBalance = "u128"
AssetKind = "NativeOrWithId<u32>"
Assets = "NativeAndAssets"
PoolId = "(Self::AssetKind, Self::AssetKind)"
PoolLocator = """Chain<
		WithFirstAsset<
			Native,
			AccountId,
			NativeOrWithId<u32>,
			AccountIdConverter<AssetConversionPalletId, Self::PoolId>,
		>,
		Ascending<
			AccountId,
			NativeOrWithId<u32>,
			AccountIdConverter<AssetConversionPalletId, Self::PoolId>,
		>,
	>"""
PoolAssetId = "u32" # "<Self as pallet_assets::Config<Instance2>>::AssetId"
#should be instance2
PoolAssets = "Assets"
# means 0.3%
LPFee = "LPFee"
MaxSwapPathLength = "MaxSwapPathLength"
PoolSetupFee = "PoolSetupFee"
PoolSetupFeeAsset = "Native"
PoolSetupFeeTarget = "()"                                                 #"ResolveAssetTo<AssetConversionOrigin, Self::Assets>"
LiquidityWithdrawalFee = "LiquidityWithdrawalFee"
MintMinLiquidity = "MintMinLiquidity"
PalletId = "AssetConversionPalletId"
WeightInfo = "pallet_asset_conversion::weights::SubstrateWeight<Runtime>"

[dependencies]
required_pallets = ["Pallet Assets"]

[dependencies.pallet]
package = "pallet-asset-conversion"
alias = "pallet asset conversion"
default_features = false
git_repo = "https://github.com/paritytech/polkadot-sdk.git"
tag = "polkadot-v1.14.0"
