name = "Pallet Authorship"

[metadata]
description = "The Authorship pallet manages block authorship, enabling the identification of block authors and supporting reward distribution or block validation in the Substrate ecosystem."
short_description = "FRAME Authorship pallet"
compatibility = "Two"
license = "Apache-2.0"
authors = ["ParityTechnologies"]
category = "Consensus"

is_essential = ["ParaChain"]
supported_template=["SoloChain","ParaChain","Minimal","Frontier","SoloFrontierChain"]

size = 10500
updated = "1729175503"
use_cases = ["SupplyChain"]

[runtime]
additional_pallet_impl_code = """


pub struct AuraAccountAdapter;
impl frame_support::traits::FindAuthor<AccountId> for AuraAccountAdapter {
	fn find_author<'a, I>(digests: I) -> Option<AccountId>
	where
		I: 'a + IntoIterator<Item = (frame_support::ConsensusEngineId, &'a [u8])>,
	{
		pallet_aura::AuraAuthorId::<Runtime>::find_author(digests)
			.and_then(|k| AccountId::try_from(k.as_ref()).ok())
	}
}


"""

[runtime.construct_runtime]
runtime = ["Authorship", "pallet_authorship::Pallet<Runtime>"]

[runtime.pallet_traits]
FindAuthor = "AuraAccountAdapter"
EventHandler = "()"


[dependencies.pallet]
package = "pallet-authorship"
alias = "pallet authorship"
default_features = false
git_repo = "https://github.com/paritytech/polkadot-sdk.git"
tag = "polkadot-v1.14.0"
