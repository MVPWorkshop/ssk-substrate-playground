name = "Pallet Referenda"

[metadata]
description = """The pallet_referenda enables governance mechanisms, allowing stakeholders to propose and vote on referenda. It provides essential configurations such as tallying systems, tracks, and submission deposit handling."""
short_description = "FRAME Referenda pallet"
is_essential = false
compatibility = "Two"
license = "Apache-2.0"
authors = ["ParityTechnologies"]
categories = ["Governance"]
size = 12000
updated = "1729175503"


# pub const MaxQueued: u32 = 100;
[runtime.optional_parameter_types.MaxQueued]
name = "MaxQueued"
description = "The maximum number of queued items."
prefix = "const"
p_type = "u32"
[runtime.optional_parameter_types.MaxQueued.expression]
default_unit = ""
default_multiiplier = 100
format = "{}{}"
possible_units = []
multiplier_configurable = true


# pub const AlarmInterval: BlockNumber = 1;
[runtime.optional_parameter_types.AlarmInterval]
name = "AlarmInterval"
description = "The interval for alarm, in blocks."
prefix = "const"
p_type = "BlockNumber"
[runtime.optional_parameter_types.AlarmInterval.expression]
default_unit = ""
default_multiiplier = 1
format = "{}{}"
possible_units = []
multiplier_configurable = true

# pub const SubmissionDeposit: Balance = 100 * DOLLARS;
[runtime.optional_parameter_types.SubmissionDeposit]
name = "SubmissionDeposit"
description = "The deposit required for submission, expressed in DOLLARS."
prefix = "const"
p_type = "Balance"
[runtime.optional_parameter_types.SubmissionDeposit.expression]
default_unit = "DOLLARS"
default_multiiplier = 100
format = "{} * {}"
possible_units = ["DOLLARS", "CENTS", "MILLICENTS"]
multiplier_configurable = true

# pub const UndecidingTimeout: BlockNumber = 28 * DAYS;
[runtime.optional_parameter_types.UndecidingTimeout]
name = "UndecidingTimeout"
description = "The timeout period for undeciding, in blocks."
prefix = "const"
p_type = "BlockNumber"
[runtime.optional_parameter_types.UndecidingTimeout.expression]
default_unit = "DAYS"
default_multiiplier = 28
format = "{} * {}"
possible_units = ["DAYS", "HOURS", "MINUTES"]
multiplier_configurable = true


[runtime]
additional_pallet_impl_code = """

pub struct TracksInfo;
impl pallet_referenda::TracksInfo<Balance, BlockNumber> for TracksInfo {
	type Id = u16;
	type RuntimeOrigin = <RuntimeOrigin as frame_support::traits::OriginTrait>::PalletsOrigin;
	fn tracks() -> &'static [(Self::Id, pallet_referenda::TrackInfo<Balance, BlockNumber>)] {
		static DATA: [(u16, pallet_referenda::TrackInfo<Balance, BlockNumber>); 1] = [(
			0u16,
			pallet_referenda::TrackInfo {
				name: "root",
				max_deciding: 1,
				decision_deposit: 10,
				prepare_period: 4,
				decision_period: 4,
				confirm_period: 2,
				min_enactment_period: 4,
				min_approval: pallet_referenda::Curve::LinearDecreasing {
					length: Perbill::from_percent(100),
					floor: Perbill::from_percent(50),
					ceil: Perbill::from_percent(100),
				},
				min_support: pallet_referenda::Curve::LinearDecreasing {
					length: Perbill::from_percent(100),
					floor: Perbill::from_percent(0),
					ceil: Perbill::from_percent(100),
				},
			},
		)];

		&DATA[..]
	}
	fn track_for(id: &Self::RuntimeOrigin) -> Result<Self::Id, ()> {
		if let Ok(system_origin) = frame_system::RawOrigin::try_from(id.clone()) {
			match system_origin {
				frame_system::RawOrigin::Root => Ok(0),
				_ => Err(()),
			}
		} else {
			Err(())
		}
	}
}
pallet_referenda::impl_tracksinfo_get!(TracksInfo, Balance, BlockNumber);



"""

[runtime.construct_runtime]
runtime = ["Referenda", "pallet_referenda::Pallet<Runtime>"]

[runtime.pallet_traits]
MaxQueued = "ConstU32<100>"
AlarmInterval = "AlarmInterval"
SubmissionDeposit = "SubmissionDeposit"
UndecidingTimeout = "UndecidingTimeout"
CancelOrigin = "EnsureRoot<AccountId>"
Currency = "Balances"
KillOrigin = "EnsureRoot<AccountId>"
Preimages = "Preimage"
RuntimeCall = "RuntimeCall"
RuntimeEvent = "RuntimeEvent"
Scheduler = "Scheduler"
Slash = "Treasury"
SubmitOrigin = "EnsureSigned<AccountId>"
Tally = "pallet_conviction_voting::TallyOf<Runtime>"
Tracks = "TracksInfo"
Votes = "pallet_conviction_voting::VotesOf<Runtime>"
WeightInfo = "pallet_referenda::weights::SubstrateWeight<Runtime>"

[dependencies]
required_pallets = [
	"Pallet Conviction Voting",
	"Pallet Treasury",
	"Pallet Scheduler",
	"Pallet Preimage",
	"Pallet Assets",
]
# ! Assets is deep dependency

[dependencies.pallet]
package = "pallet-referenda"
alias = "pallet referenda"
default_features = false
git_repo = "https://github.com/paritytech/polkadot-sdk.git"
tag = "polkadot-v1.14.0"
